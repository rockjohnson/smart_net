/*
 * io_task.cpp
 *
 *  Created on: Nov 30, 2010
 *      Author: rock
 */

#include "io_task.h"

namespace nm_framework
{

	CIoTask::CIoTask()
	{
		// TODO Auto-generated constructor stub
	}

	CIoTask::~CIoTask()
	{
		// TODO Auto-generated destructor stub
	}

	void CIoTask::exec()
	{
		///create io event notify mechanism obj.
#if __PLATFORM__ == __PLATFORM_LINUX__
		m_pIoEvtNotify = new CEpoll;
#elif __PLATFORM__ == __PLATFORM_WINDOWS__
		m_pIoEvtNotify = new CSelect;
#endif
		int32_t iRet = m_pIoEvtNotify->init();
		if (0 > iRet)
		{
			TRACE_LAST_ERR(IO_LOG, m_pIoEvtNotify->init());
			return;
		}

		CIoEvtSet setIoEvts;
		///main logic circle
		while (!is_stopped())
		{
			update_internal_io_set();

			iRet = m_pIoEvtNotify->wait_io_evts(setIoEvts, m_ui32MaxIoEvtWaitInterval);
			if (0 > iRet)
			{
				TRACE_LAST_ERR(IO_LOG, m_pIoEvtNotify->wait_io_evts());
				return;
			}
			if (setIoEvts.get_evt_cnt() > 0)
			{
				///process the events.
			}

			///handle internal timers.
			handle_internal_timers();

			///handle bad io objs.
			handle_bad_objs();
		}
	}

}
